#!/usr/bin/env python

import luigi
import click
import os
import sys
from rnaseq.utils import config
from rnaseq.utils.util_functions import nohuprun_cmd, clean_logs
from rnaseq.utils.util_functions import MutuallyExclusiveOption
from rnaseq.utils.util_functions import pipe_default_para, save_mkdir
from rnaseq.utils.util_functions import check_data, resize_report_plot
from rnaseq.modules.fastqc import fastqc
from rnaseq.modules.quantification import quant
from rnaseq.modules.mapping import star_mapping
from rnaseq.modules.enrichment import enrich, quick_enrich
from rnaseq.modules.report import report
import itertools
from pathlib import PurePath
import envoy


CURRENT_DIR = os.getcwd()
DEFAULT_SAMPLE_INI = os.path.join(CURRENT_DIR, 'sample.ini')
DEFAULT_FQ_DIR = os.path.join(CURRENT_DIR, 'cleandata')


MODULE_PARAMS = {
    'fastqc': (),
    'quant': ('kallisto_idx', 'gene2tr'),
    'mapping': ('star_index',),
    'pipe_enrich': ('go', 'gene_length',
                    'kegg_blast', 'kegg_abbr'),
    'enrich': ('go', 'gene_length',
               'kegg_blast', 'kegg_abbr', 'gene_list_file')
}


def check_params(ctx, module):
    missing_params = []
    for each in MODULE_PARAMS[module]:
        if ctx.obj[each] is None:
            missing_params.append(each)
    return missing_params


def load_module(ctx):
    # define modules
    fastqc_missing_params = check_params(ctx, 'fastqc')
    if fastqc_missing_params:
        fastqc_module = fastqc_missing_params
    else:
        fastqc_module = fastqc.fastqc_results(
            proj_name=ctx.obj['proj_name'],
            clean_dir=ctx.obj['fq_dir'],
            sample_inf=ctx.obj['sample_inf'],
            proj_dir=ctx.obj['proj_dir'])

    quant_missing_params = check_params(ctx, 'quant')
    if quant_missing_params:
        quant_module = quant_missing_params
    else:
        quant_module = quant.quant_results(
            clean_dir=ctx.obj['fq_dir'],
            proj_name=ctx.obj['proj_name'],
            sample_inf=ctx.obj['sample_inf'],
            proj_dir=ctx.obj['proj_dir'],
            tr_index=ctx.obj['kallisto_idx'],
            gene2tr=ctx.obj['gene2tr'],
            contrasts=ctx.obj['contrasts'],
            gene_anno=ctx.obj['gene_anno']
        )

    mapping_missing_params = check_params(ctx, 'mapping')
    if mapping_missing_params:
        mapping_module = mapping_missing_params
    else:
        mapping_module = star_mapping.star_mapping_results(
            proj_name=ctx.obj['proj_name'],
            proj_dir=ctx.obj['proj_dir'],
            clean_dir=ctx.obj['fq_dir'],
            sample_inf=ctx.obj['sample_inf'],
            star_index=ctx.obj['star_index'],
        )

    pipe_enrich_missing_params = check_params(ctx, 'pipe_enrich')
    if pipe_enrich_missing_params:
        pipe_enrich_module = pipe_enrich_missing_params
    else:
        pipe_enrich_module = enrich.enrich_results(
            proj_dir=ctx.obj['proj_dir'],
            proj_name=ctx.obj['proj_name'],
            go=ctx.obj['go'],
            gene_length=ctx.obj['gene_length'],
            kegg=ctx.obj['kegg_blast'],
            sp=ctx.obj['kegg_abbr'],
            kegg_bg=ctx.obj['kegg_background']
        )

    enrich_missing_params = check_params(ctx, 'enrich')
    if enrich_missing_params:
        enrich_module = enrich_missing_params
    else:
        enrich_module = quick_enrich.q_enrich_result(
            proj_dir=ctx.obj['proj_dir'],
            proj_name=ctx.obj['proj_name'],
            go=ctx.obj['go'],
            gene_length=ctx.obj['gene_length'],
            kegg=ctx.obj['kegg_blast'],
            sp=ctx.obj['kegg_abbr'],
            kegg_bg=ctx.obj['kegg_background'],
            gene_files=ctx.obj['gene_list_file']
        )

    report_module = report.generate_report(
        proj_dir=ctx.obj['proj_dir'],
        proj_name=ctx.obj['proj_name']
    )

    # map modules to name
    module_dict = {
        'fastqc': [fastqc_module],
        'quant': [quant_module],
        'mapping': [mapping_module],
        'pipe_enrich': [pipe_enrich_module],
        'enrich': [enrich_module],
        'report': [report_module],
        'rnaseq': [fastqc_module, quant_module,
                   pipe_enrich_module, report_module]
    }

    return module_dict


def launch_module(ctx, module_name):
    module_obj = ctx.obj['MODULE_DICT'][module_name]
    out_obj = []
    for each in module_obj:
        if isinstance(each, list):
            param_list = ['--{each}'.format(each=each)
                          for each in each]
            param_str = ','.join(param_list)
            out_obj.append('{mp} is needed for module {mn}'.format(
                mp=param_str, mn=module_name
            ))
        else:
            out_obj.append(each)
    return out_obj


@click.group(chain=True)
@click.option('-p',
              '--proj_dir',
              type=click.Path(file_okay=False),
              default=CURRENT_DIR,
              help='Project analysis directory.                 \
              DEFAULT: current dir.')
@click.option('-n',
              '--proj_name',
              type=click.STRING,
              default='results',
              help='Project name.                     \
              DEFAULT: "results".')
@click.option('-s',
              '--sample_inf',
              type=click.Path(dir_okay=False),
              default=DEFAULT_SAMPLE_INI,
              help='Group vs Sample file.                       \
              DEFAULT: "sample.ini" in current directory.')
@click.option('-w',
              '--workers',
              default=4,
              type=int,
              help='Paralle number.                    \
              DEFAULT: 4.')
@click.option('-f',
              '--fq_dir',
              type=click.Path(file_okay=False),
              help='Directory place analysis fq files. \
              DEFAULT: "cleandata" in current dir.',
              default=DEFAULT_FQ_DIR)
@click.option('--gene2tr',
              type=click.Path(exists=True, dir_okay=False),
              help='Transcript_id <-> Gene_id map file.\
              REQUIED for [quant] module.',
              default=None)
@click.option('--kallisto_idx',
              type=click.Path(exists=True, dir_okay=False),
              help='Kallisto index for quantification.\
              REQUIED for [quant] module.')
@click.option('--contrasts',
              type=click.Path(dir_okay=False),
              help='Compare list to perform diff analysis. \
              DEFAULT: "None".',
              default='None')
@click.option('--star_index',
              type=click.Path(file_okay=False),
              help='STAR index directory.               \
              REQUIED for [mapping] module.',
              default=None)
@click.option('--go',
              type=click.Path(dir_okay=False),
              help='GO annotation for go analysis.\
              REQUIED for [pipe_enrich, enrich] module.',
              default=None)
@click.option('--gene_length',
              type=click.Path(dir_okay=False),
              help='Gene length file for goseq analysis.\
              REQUIED for [pipe_enrich, enrich] module.',
              default=None)
@click.option('--kegg_blast',
              type=click.Path(dir_okay=False),
              help='KEGG blast annotation for KEGG analysis.\
              REQUIED for [pipe_enrich, enrich] module.',
              default=None)
@click.option('--kegg_abbr',
              type=click.STRING,
              help='KEGG abbr for KEGG analysis.      \
              REQUIED for [pipe_enrich, enrich] module.',
              default=None)
@click.option('--kegg_background',
              type=click.STRING,
              help='KEGG backgroud species abbr for KEGG analysis.\
              DEFAULT: kegg_abbr.',
              default=None)
@click.option('--gene_list_file',
              type=click.Path(dir_okay=False),
              help='Gene list file for analysis.            \
              REQUIED for [enrich] module.',
              default=None)
@click.option('--gene_anno',
              type=click.Path(dir_okay=False),
              help='Gene annotation file for expression table.            \
              SUGGESTED for [quant] module.',
              default='')
@click.pass_context
def cli(ctx, proj_dir, sample_inf, fq_dir, workers,
        gene2tr, kallisto_idx, contrasts, proj_name,
        star_index, go, gene_length, kegg_blast,
        kegg_abbr, kegg_background, gene_list_file,
        gene_anno):
    ctx.obj['proj_dir'] = proj_dir
    ctx.obj['proj_name'] = proj_name
    ctx.obj['sample_inf'] = sample_inf
    ctx.obj['fq_dir'] = fq_dir
    ctx.obj['workers'] = workers
    ctx.obj['gene2tr'] = gene2tr
    ctx.obj['kallisto_idx'] = kallisto_idx
    ctx.obj['contrasts'] = contrasts
    ctx.obj['star_index'] = star_index
    ctx.obj['go'] = go
    ctx.obj['gene_length'] = gene_length
    ctx.obj['kegg_blast'] = kegg_blast
    ctx.obj['kegg_abbr'] = kegg_abbr
    ctx.obj['gene_list_file'] = gene_list_file
    ctx.obj['gene_anno'] = gene_anno
    if kegg_background is None:
        ctx.obj['kegg_background'] = kegg_abbr
    else:
        ctx.obj['kegg_background'] = kegg_background
    ctx.obj['MODULE_DICT'] = load_module(ctx)


@cli.resultcallback()
def process_pipeline(modules, proj_dir, sample_inf,
                     fq_dir, workers, gene2tr,
                     kallisto_idx, contrasts, proj_name,
                     star_index, go, gene_length, kegg_blast,
                     kegg_abbr, kegg_background, gene_list_file,
                     gene_anno):
    module_list = []
    param_list = []
    for each in itertools.chain.from_iterable(modules):
        if isinstance(each, str):
            click.secho('=' * 60)
            click.secho(each_param)
            click.secho('=' * 60)
            sys.exit('Paramters needed!')
        else:
            luigi.build([each], workers=workers)


@cli.command('fastqc')
@click.pass_context
def qc_cmd(ctx):
    return launch_module(ctx, 'fastqc')


@cli.command('quant')
@click.pass_context
def quantification_cmd(ctx):
    return launch_module(ctx, 'quant')


@cli.command('mapping')
@click.pass_context
def mapping_cmd(ctx):
    return launch_module(ctx, 'mapping')


@cli.command('pipe_enrich')
@click.pass_context
def pipe_enrich_cmd(ctx):
    return launch_module(ctx, 'pipe_enrich')


@cli.command('enrich')
@click.pass_context
def enrich_cmd(ctx):
    return launch_module(ctx, 'enrich')


@cli.command('report')
@click.pass_context
def report_cmd(ctx):
    return launch_module(ctx, 'report')


@cli.command('rnaseq')
@click.pass_context
def rnaseq_cmd(ctx):
    return launch_module(ctx, 'rnaseq')


if __name__ == '__main__':
    cli(obj={})
