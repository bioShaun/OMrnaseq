#!/usr/bin/env python

import os
import gzip
import io
import luigi
from luigi.util import requires, inherits
from rnaseq.modules.fastqc import fastqc
from rnaseq.modules.mapping import star_mapping
from rnaseq.utils import config
from rnaseq.modules.base_module import prepare
from rnaseq.modules.base_module import simple_task
from rnaseq.modules.base_module import collection_task

script_dir, script_name = os.path.split(os.path.abspath(__file__))
MODULE, _ = os.path.splitext(script_name)
# DATA_NUM = 20000000
# test
DATA_NUM = 20000


class qc_prepare_dir(prepare):

    _module = MODULE
    clean_dir = luigi.Parameter()
    star_index = luigi.Parameter()
    sample_inf = luigi.Parameter()


@requires(qc_prepare_dir)
class get_qc_data(luigi.Task):
    '''
    get reads of each sample for qc
    '''

    _module = MODULE
    sample = luigi.Parameter()
    _log_dir = config.module_dir[MODULE]['logs']

    def run(self):
        qc_data_dir = os.path.join(
            self.proj_dir, config.module_dir[MODULE]['data'])
        fq_files = [
            '{0}/{1}_{2}.clean.fq.gz'.format(self.clean_dir, self.sample, each) for each in (1, 2)]
        qc_fq_files = [
            '{0}/{1}_{2}.clean.fq.gz'.format(qc_data_dir, self.sample, each) for each in (1, 2)]
        for n, each_fq in enumerate(fq_files):
            with gzip.open(qc_fq_files[n], 'wb') as output_fq:
                with gzip.open(each_fq, 'rb') as input_fq:
                    br_input_fq = io.BufferedReader(input_fq)
                    for n, eachline in enumerate(br_input_fq):
                        if n < DATA_NUM:
                            output_fq.write(eachline)

    def output(self):
        return luigi.LocalTarget('{t.project_dir}/{t._log_dir}/{t.sample}.get_qc_data.log'.format(t=self))


# class mrna_qc_fastqc(luigi.Task):
#
#     def requires(self):
#         return fastqc.fastqc_collection()


if __name__ == '__main__':
    luigi.run()
